# -*- coding: utf-8 -*-
"""Graphs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lr2nX52gXbgGjpkJ6TLo6oR2q9ATGfrg
"""

import plotly.offline as py
import plotly.graph_objs as go

import matplotlib.pyplot as plt

import pandas as pd
import numpy as np

import plotly.express as px #high level wrapping or creating figures
from plotly.figure_factory import create_table #more aesthetic than usual pandas dataframe

gapminder = px.data.gapminder()
table = create_table(gapminder.head(10))
py.iplot(table)

data_canada = px.data.gapminder().query('country == "Canada"')
fig = px.bar(data_canada, x = 'year', y = 'pop', height = 400)
fig.show()

fig = px.bar(data_canada, x = 'year', y = 'pop', height = 400, hover_data=['lifeExp', 'gdpPercap'], color='lifeExp',
             labels = {'pop': 'population of canada'})
fig.show()

gap2007 = px.data.gapminder().query('year == "2007"')

px.scatter(gap2007, x = 'gdpPercap', y = 'lifeExp')

px.scatter(gap2007, x = 'gdpPercap', y = 'lifeExp', color = 'continent')

px.scatter(gap2007, x = 'gdpPercap', y = 'lifeExp', color = 'continent', size = 'pop', size_max= 50, hover_name='country')

px.scatter(gap2007, x = 'gdpPercap', y = 'lifeExp', color = 'continent', size = 'pop', size_max= 50, hover_name='country',
           facet_col = 'continent', log_x = True)

px.scatter(gapminder, x = 'gdpPercap', y = 'lifeExp', color = 'continent', size = 'pop', size_max= 50, hover_name='country',
           animation_frame = 'year', animation_group = 'country', log_x = True, range_x = [100, 100000], range_y = [25, 90],
           labels = {'pop':'Population', 'gdpPercap':'GDP per capita'}, height = 500)

px.choropleth(gapminder, locations = 'iso_alpha', color = 'lifeExp', hover_name = 'country',
              animation_frame = 'year', color_continuous_scale = px.colors.sequential.Plasma, projection = 'natural earth')

px.choropleth(gapminder, locations = 'iso_alpha', color = 'lifeExp', hover_name = 'country',
              animation_frame = 'year', color_continuous_scale = px.colors.sequential.Plasma, projection = 'orthographic')

